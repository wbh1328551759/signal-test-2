# Copyright 2020-2021 Signal Messenger, LLC
# SPDX-License-Identifier: AGPL-3.0-only

name: CI
on:
  push:
    tags:
      - '*'

# Workflow's jobs
jobs:
  # job's id
  release:
    # job's name
    name: build and release electron app

    # the type of machine to run the job on
    runs-on: ${{ matrix.os }}

    # create a build matrix for jobs
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019]

    # create steps
    steps:
      # step1: check out repository
      - uses: actions/checkout@v2

      # step2: install node
      - uses: actions/setup-node@v2
        with:
          node-version: '14.16.0'
      - run: npm install -g yarn@1.22.10

      # step2: install and cache node_modules
      - name: Cache Desktop node_modules
        id: cache-desktop-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock', 'patches/**') }}
      - name: Install Desktop node_modules
        if: steps.cache-desktop-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      # step4: cleanup artifacts in dist_electron
      - name: build artifacts for windows
        if: matrix.os == 'windows-2019'
        run: |
          yarn generate
          node build\grunt.js
          copy package.json temp.json
          type temp.json | findstr /v certificateSubjectName | findstr /v certificateSha1 > package.json
          yarn prepare-beta-build
          yarn build
        env:
          NODE_ENV: production
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: build artifacts for macosZ
        if: matrix.os == 'macos-10.15'
        run: |
          yarn generate
          yarn prepare-beta-build
          yarn build
        env:
          NODE_ENV: production
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: build artifacts for linux
        if: matrix.os == 'ubuntu-20.04'
        run: |
          yarn generate
          yarn prepare-beta-build
          yarn build
        env:
          NODE_ENV: production
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # step5: clea nartifacts
      - name: cleanup artifacts for windows
        if: matrix.os == 'windows-2019'
        run: |
          npx rimraf "release/!(*.exe)"
      - name: cleanup artifacts for macos
        if: matrix.os == 'macos-10.15'
        run: |
          npx rimraf "release/!(*.dmg)"
      - name: cleanup artifacts for ubuntu
        if: matrix.os == 'ubuntu-20.04'
        run: |
          npx rimraf "release/!(*.deb)"
      # step6: upload artifacts
      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}
          path: release

      # step7: create release
      - name: release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: 'release/**'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
